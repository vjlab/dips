#How to run

#DENGUE
#snakemake --snakefile dips/src/DIPipe_multirefPaired.snk -j 12 --config ifq=/home/miguelg/bm14/data/DIPs/dengue/ refFA=/home/miguelg/bm14_scratch/miguel/DIP/dengue2/consensus/post/ out=/home/miguelg/bm14_scratch/miguel/DIP/denguemulti/ -np

#IMPORTANT
#DI-detect generates very heavy temporal files, so if you get some error, try running less jobs at once `-j 2`

#PIPE to 1)Quality trim fastq single reads 2)Map using a ONE REFERENCE PER EACH SAMPLE and a indel-aware aligner. REFERENCE AND SAMPLE MUST HAVE THE SAME NAME.
 
import subprocess, sys, os, glob 
from os.path import join
from pathlib import Path
from os.path import basename
import shutil
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio.SeqRecord import SeqRecord
import numpy as np

# Input parameters  ------------------------------------------------------------------------
#

#fastq
IFQ = config["ifq"]

#Reference fasta
refFA =  config["refFA"]

#Out folder
workspace= config["out"]

threads=4

#software location
#vy server
#trimmomatic="/home/miguelgrau/apps/Trimmomatic-0.39/trimmomatic-0.39.jar"
#m3
trimmomatic="/home/miguelg/bm14/apps/Trimmomatic-0.36/trimmomatic-0.36.jar"

#Check file-names
SAMPLES=[]
#for file in glob.glob(IFQ+"*.fastq.gz"):
#  SAMPLES.append('.'.join(file.split("/")[-1].split(".")[:-1]))

#Check file-names
SAMPLES=[]
for file in glob.glob(IFQ+"*.R1.fastq.gz"):
  SAMPLES.append('.'.join(file.split("/")[-1].split(".")[:-3]))


#print(filenam)

## Functions -------------------------------------------------------------------

# Rules ------------------------------------------------------------------------
#

rule all:
    input:
        expand(workspace+'qualtrim/{sample}.assembled.fastq', sample=SAMPLES),
        expand(workspace+'star/{sample}/run/SJ.out.tab', sample=SAMPLES),
        expand(workspace+'DItector/{sample}/DI-tector_counts.txt', sample=SAMPLES),
        expand(workspace+'starOnlyDips/{sample}/run/SJ.out.tab', sample=SAMPLES)
 
#############################################################################
#                                                                           #
#    QUALTRIM                                                               #
#                                                                           #    
#############################################################################

# FASTA_DIR = IFQ
# PATTERN = '{sample}.fastq'

# #Prestep QUALITY FILTER
# rule filter:
#   input:
#       IFQ+"{sample}.fastq"
#   output:
#       files=workspace+'qualtrim/{sample}.fastq'
#   params:
#       trimmo=trimmomatic
#   shell:"""
#       java -jar {params.trimmo}  SE -phred33 {input} {output.files} SLIDINGWINDOW:4:15 LEADING:3
#   """   

#Paired read
SAMPLES, PAIR= glob_wildcards(IFQ+"/{sample}.{pair}.fastq.gz")

rule filter:
    input:
        #fastq=join(FASTA_DIR, PATTERN)
        faR1=expand(IFQ+"{{sample}}.{pair}.fastq.gz", pair=["R1"]),
        faR2=expand(IFQ+"{{sample}}.{pair}.fastq.gz", pair=["R2"])
    output:
        #files=workspace+'qualtrim/{sample}.fq'
        R1out=workspace+"qualtrim/{sample}.R1.paired.fastq",
        R2out=workspace+"qualtrim/{sample}.R2.paired.fastq",
        R1out_unpaired=workspace+"qualtrim/{sample}.R1.unpaired.fastq",
        R2out_unpaired=workspace+"qualtrim/{sample}.R2.unpaired.fastq"
    params:
        trimmo=trimmomatic
    shell:"""
        java -jar {params.trimmo} PE -phred33 {input.faR1} {input.faR2} {output.R1out} {output.R1out_unpaired} {output.R2out} {output.R2out_unpaired} ILLUMINACLIP:/home/miguelg/bm14/apps/Trimmomatic-0.36/adapters/NexteraPE-PE.fa:2:30:10 SLIDINGWINDOW:4:15 LEADING:15 TRAILING:15 MINLEN:100 HEADCROP:20
"""   


rule pear:
  input:
    R1out=workspace+"qualtrim/{sample}.R1.paired.fastq",
    R2out=workspace+"qualtrim/{sample}.R2.paired.fastq"   
  output:
    workspace+"qualtrim/{sample}.assembled.fastq",
  params:
    out=workspace+"qualtrim/{sample}"
  shell:"""
    pear -f {input.R1out} -r {input.R2out} -o {params}
  """


#############################################################################
#                                                                           #
#    INDEL AWARE ALIGNER                                                    #
#                                                                           #    
#############################################################################

rule STAR:
    input:
        workspace+"qualtrim/{sample}.assembled.fastq",
    output:
        workspace+'star/{sample}/run/SJ.out.tab'
    params:
        ref=refFA+"{sample}.fa",
        outf=workspace+"star/{sample}"
    shell:"""
        mkdir -p {params.outf}
        STAR --runMode genomeGenerate --genomeSAindexNbases 5 --genomeDir {params.outf} --genomeFastaFiles {params.ref}
        mkdir -p {params.outf}/run
        cd {params.outf}/run
        STAR --genomeDir {params.outf} --readFilesIn {input}
    """

rule ditector:
  input:
    files=workspace+"qualtrim/{sample}.assembled.fastq"
  output:
    files=workspace+'DItector/{sample}/DI-tector_counts.txt',
    files2=workspace+'DItector/{sample}/DI-tector_output_sorted.txt'
  params:
    out=workspace+'DItector/{sample}/',
    ref=refFA+"{sample}.fa"
  shell:"""
    bwa index {params.ref}
    python3 /home/miguelg/bm14/apps/DI-tector_06.py {params.ref} {input.files} -o {params.out} -x 4
  """

#Prepare fastas for di-tector output
rule ditect2fasta:
  input:
    workspace+'DItector/{sample}/DI-tector_output_sorted.txt'
  output:
    workspace+'DItector/{sample}/DI-tector.dips.fasta'
  run:
    res=""
    with open (input[0],'r') as fi:
      for line in fi:
        if line.split("\t")[0]!="DVG's type":
          res+=">"+line.split("\t")[-2]+"\n"+line.split("\t")[-1]
    with open (output[0],'w') as fo:
      fo.write(res)

#Run STAR only with DIPS form di-tector
rule STAR2:
    input:
        fo=workspace+'DItector/{sample}/DI-tector.dips.fasta'
    output:
        workspace+'starOnlyDips/{sample}/run/SJ.out.tab'
    params:
        ref=refFA+"{sample}.fa",
        outf=workspace+"starOnlyDips/{sample}"
    shell:"""
        mkdir -p {params.outf}
        STAR --runMode genomeGenerate --genomeSAindexNbases 5 --genomeDir {params.outf} --genomeFastaFiles {params.ref}
        mkdir -p {params.outf}/run
        cd {params.outf}/run
        STAR --genomeDir {params.outf} --readFilesIn {input}
    """